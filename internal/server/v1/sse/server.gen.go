// Package sse provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package sse

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// Defines values for EventEnvelopeType.
const (
	ChecklistItemCreated    EventEnvelopeType = "checklistItemCreated"
	ChecklistItemDeleted    EventEnvelopeType = "checklistItemDeleted"
	ChecklistItemReordered  EventEnvelopeType = "checklistItemReordered"
	ChecklistItemRowAdded   EventEnvelopeType = "checklistItemRowAdded"
	ChecklistItemRowDeleted EventEnvelopeType = "checklistItemRowDeleted"
	ChecklistItemRowUpdated EventEnvelopeType = "checklistItemRowUpdated"
	ChecklistItemUpdated    EventEnvelopeType = "checklistItemUpdated"
)

// ChecklistItemDeletedEventPayload defines model for ChecklistItemDeletedEventPayload.
type ChecklistItemDeletedEventPayload struct {
	ItemId uint `json:"itemId"`
}

// ChecklistItemReorderedEventPayload defines model for ChecklistItemReorderedEventPayload.
type ChecklistItemReorderedEventPayload struct {
	ItemId         uint `json:"itemId"`
	NewOrderNumber uint `json:"newOrderNumber"`

	// OrderChanged Indicates if the order number was changed
	OrderChanged bool `json:"orderChanged"`
}

// ChecklistItemResponse defines model for ChecklistItemResponse.
type ChecklistItemResponse struct {
	Completed   bool                       `json:"completed"`
	Id          uint                       `json:"id"`
	Name        string                     `json:"name"`
	OrderNumber uint                       `json:"orderNumber"`
	Rows        []ChecklistItemRowResponse `json:"rows"`
}

// ChecklistItemRowAddedEventPayload defines model for ChecklistItemRowAddedEventPayload.
type ChecklistItemRowAddedEventPayload struct {
	ItemId uint                     `json:"itemId"`
	Row    ChecklistItemRowResponse `json:"row"`
}

// ChecklistItemRowDeletedEventPayload defines model for ChecklistItemRowDeletedEventPayload.
type ChecklistItemRowDeletedEventPayload struct {
	ItemId uint `json:"itemId"`
	RowId  uint `json:"rowId"`
}

// ChecklistItemRowResponse defines model for ChecklistItemRowResponse.
type ChecklistItemRowResponse struct {
	Completed *bool  `json:"completed"`
	Id        uint   `json:"id"`
	Name      string `json:"name"`
}

// EventEnvelope Envelope for SSE events; sent as JSON in the SSE data field.
// The `type` field indicates the event type, and the `payload` field contains the event data.
// The expected structure of `payload` for each `type` is as follows:
//   - checklistItemCreated: ChecklistItemResponse
//   - checklistItemUpdated: ChecklistItemResponse
//   - checklistItemDeleted: ChecklistItemDeletedEventPayload
//   - checklistItemRowAdded: ChecklistItemRowResponse
//   - checklistItemRowUpdated: ChecklistItemRowResponse
//   - checklistItemRowDeleted: ChecklistItemRowDeletedEventPayload
//   - checklistItemRowAdded: ChecklistItemRowAddedEventPayload
//   - checklistItemReordered: ChecklistItemReorderedEventPayload
//
// For event types not listed above, `payload` may be null or a free-form object.
type EventEnvelope struct {
	// Payload Payload structure depends on event type:
	//   - checklistItemCreated, checklistItemUpdated: ChecklistItemResponse
	//   - checklistItemDeleted: ChecklistItemDeletedEventPayload
	//   - checklistItemRowAdded, checklistItemRowUpdated: ChecklistItemRowResponse
	//   - checklistItemRowDeleted: ChecklistItemRowDeletedEventPayload
	//   - checklistItemReordered: ChecklistItemReorderedEventPayload
	Payload *EventEnvelope_Payload `json:"payload,omitempty"`

	// Type Event type identifier
	Type EventEnvelopeType `json:"type"`
}

// EventEnvelope_Payload Payload structure depends on event type:
//   - checklistItemCreated, checklistItemUpdated: ChecklistItemResponse
//   - checklistItemDeleted: ChecklistItemDeletedEventPayload
//   - checklistItemRowAdded, checklistItemRowUpdated: ChecklistItemRowResponse
//   - checklistItemRowDeleted: ChecklistItemRowDeletedEventPayload
//   - checklistItemReordered: ChecklistItemReorderedEventPayload
type EventEnvelope_Payload struct {
	union json.RawMessage
}

// EventEnvelopeType Event type identifier
type EventEnvelopeType string

// XClientId defines model for X-Client-Id.
type XClientId = string

// GetEventsStreamForChecklistItemsParams defines parameters for GetEventsStreamForChecklistItems.
type GetEventsStreamForChecklistItemsParams struct {
	// ClientId Client identifier passed by frontend
	ClientId *string `form:"clientId,omitempty" json:"clientId,omitempty"`
}

// AsChecklistItemResponse returns the union data inside the EventEnvelope_Payload as a ChecklistItemResponse
func (t EventEnvelope_Payload) AsChecklistItemResponse() (ChecklistItemResponse, error) {
	var body ChecklistItemResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChecklistItemResponse overwrites any union data inside the EventEnvelope_Payload as the provided ChecklistItemResponse
func (t *EventEnvelope_Payload) FromChecklistItemResponse(v ChecklistItemResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChecklistItemResponse performs a merge with any union data inside the EventEnvelope_Payload, using the provided ChecklistItemResponse
func (t *EventEnvelope_Payload) MergeChecklistItemResponse(v ChecklistItemResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChecklistItemRowResponse returns the union data inside the EventEnvelope_Payload as a ChecklistItemRowResponse
func (t EventEnvelope_Payload) AsChecklistItemRowResponse() (ChecklistItemRowResponse, error) {
	var body ChecklistItemRowResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChecklistItemRowResponse overwrites any union data inside the EventEnvelope_Payload as the provided ChecklistItemRowResponse
func (t *EventEnvelope_Payload) FromChecklistItemRowResponse(v ChecklistItemRowResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChecklistItemRowResponse performs a merge with any union data inside the EventEnvelope_Payload, using the provided ChecklistItemRowResponse
func (t *EventEnvelope_Payload) MergeChecklistItemRowResponse(v ChecklistItemRowResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChecklistItemRowDeletedEventPayload returns the union data inside the EventEnvelope_Payload as a ChecklistItemRowDeletedEventPayload
func (t EventEnvelope_Payload) AsChecklistItemRowDeletedEventPayload() (ChecklistItemRowDeletedEventPayload, error) {
	var body ChecklistItemRowDeletedEventPayload
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChecklistItemRowDeletedEventPayload overwrites any union data inside the EventEnvelope_Payload as the provided ChecklistItemRowDeletedEventPayload
func (t *EventEnvelope_Payload) FromChecklistItemRowDeletedEventPayload(v ChecklistItemRowDeletedEventPayload) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChecklistItemRowDeletedEventPayload performs a merge with any union data inside the EventEnvelope_Payload, using the provided ChecklistItemRowDeletedEventPayload
func (t *EventEnvelope_Payload) MergeChecklistItemRowDeletedEventPayload(v ChecklistItemRowDeletedEventPayload) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChecklistItemRowAddedEventPayload returns the union data inside the EventEnvelope_Payload as a ChecklistItemRowAddedEventPayload
func (t EventEnvelope_Payload) AsChecklistItemRowAddedEventPayload() (ChecklistItemRowAddedEventPayload, error) {
	var body ChecklistItemRowAddedEventPayload
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChecklistItemRowAddedEventPayload overwrites any union data inside the EventEnvelope_Payload as the provided ChecklistItemRowAddedEventPayload
func (t *EventEnvelope_Payload) FromChecklistItemRowAddedEventPayload(v ChecklistItemRowAddedEventPayload) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChecklistItemRowAddedEventPayload performs a merge with any union data inside the EventEnvelope_Payload, using the provided ChecklistItemRowAddedEventPayload
func (t *EventEnvelope_Payload) MergeChecklistItemRowAddedEventPayload(v ChecklistItemRowAddedEventPayload) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChecklistItemDeletedEventPayload returns the union data inside the EventEnvelope_Payload as a ChecklistItemDeletedEventPayload
func (t EventEnvelope_Payload) AsChecklistItemDeletedEventPayload() (ChecklistItemDeletedEventPayload, error) {
	var body ChecklistItemDeletedEventPayload
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChecklistItemDeletedEventPayload overwrites any union data inside the EventEnvelope_Payload as the provided ChecklistItemDeletedEventPayload
func (t *EventEnvelope_Payload) FromChecklistItemDeletedEventPayload(v ChecklistItemDeletedEventPayload) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChecklistItemDeletedEventPayload performs a merge with any union data inside the EventEnvelope_Payload, using the provided ChecklistItemDeletedEventPayload
func (t *EventEnvelope_Payload) MergeChecklistItemDeletedEventPayload(v ChecklistItemDeletedEventPayload) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChecklistItemReorderedEventPayload returns the union data inside the EventEnvelope_Payload as a ChecklistItemReorderedEventPayload
func (t EventEnvelope_Payload) AsChecklistItemReorderedEventPayload() (ChecklistItemReorderedEventPayload, error) {
	var body ChecklistItemReorderedEventPayload
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChecklistItemReorderedEventPayload overwrites any union data inside the EventEnvelope_Payload as the provided ChecklistItemReorderedEventPayload
func (t *EventEnvelope_Payload) FromChecklistItemReorderedEventPayload(v ChecklistItemReorderedEventPayload) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChecklistItemReorderedEventPayload performs a merge with any union data inside the EventEnvelope_Payload, using the provided ChecklistItemReorderedEventPayload
func (t *EventEnvelope_Payload) MergeChecklistItemReorderedEventPayload(v ChecklistItemReorderedEventPayload) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EventEnvelope_Payload) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EventEnvelope_Payload) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Server-Sent Events stream for real-time updates for checklist items, filtered by checklistId
	// (GET /v1/events/checklist-item-updates/{checklistId})
	GetEventsStreamForChecklistItems(c *gin.Context, checklistId uint, params GetEventsStreamForChecklistItemsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetEventsStreamForChecklistItems operation middleware
func (siw *ServerInterfaceWrapper) GetEventsStreamForChecklistItems(c *gin.Context) {

	var err error

	// ------------- Path parameter "checklistId" -------------
	var checklistId uint

	err = runtime.BindStyledParameterWithOptions("simple", "checklistId", c.Param("checklistId"), &checklistId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter checklistId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventsStreamForChecklistItemsParams

	// ------------- Optional query parameter "clientId" -------------

	err = runtime.BindQueryParameter("form", true, false, "clientId", c.Request.URL.Query(), &params.ClientId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter clientId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEventsStreamForChecklistItems(c, checklistId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/events/checklist-item-updates/:checklistId", wrapper.GetEventsStreamForChecklistItems)
}

type GetEventsStreamForChecklistItemsRequestObject struct {
	ChecklistId uint `json:"checklistId"`
	Params      GetEventsStreamForChecklistItemsParams
}

type GetEventsStreamForChecklistItemsResponseObject interface {
	VisitGetEventsStreamForChecklistItemsResponse(w http.ResponseWriter) error
}

type GetEventsStreamForChecklistItems200TexteventStreamResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetEventsStreamForChecklistItems200TexteventStreamResponse) VisitGetEventsStreamForChecklistItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/event-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Server-Sent Events stream for real-time updates for checklist items, filtered by checklistId
	// (GET /v1/events/checklist-item-updates/{checklistId})
	GetEventsStreamForChecklistItems(ctx context.Context, request GetEventsStreamForChecklistItemsRequestObject) (GetEventsStreamForChecklistItemsResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetEventsStreamForChecklistItems operation middleware
func (sh *strictHandler) GetEventsStreamForChecklistItems(ctx *gin.Context, checklistId uint, params GetEventsStreamForChecklistItemsParams) {
	var request GetEventsStreamForChecklistItemsRequestObject

	request.ChecklistId = checklistId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEventsStreamForChecklistItems(ctx, request.(GetEventsStreamForChecklistItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEventsStreamForChecklistItems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetEventsStreamForChecklistItemsResponseObject); ok {
		if err := validResponse.VisitGetEventsStreamForChecklistItemsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
