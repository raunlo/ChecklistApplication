// Package checklist provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package checklist

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ChecklistItemResponse defines model for ChecklistItemResponse.
type ChecklistItemResponse struct {
	Completed   bool                       `json:"completed"`
	Id          uint                       `json:"id"`
	Name        string                     `json:"name"`
	OrderNumber uint                       `json:"orderNumber"`
	Rows        []ChecklistItemRowResponse `json:"rows"`
}

// ChecklistItemRowResponse defines model for ChecklistItemRowResponse.
type ChecklistItemRowResponse struct {
	Completed *bool  `json:"completed"`
	Id        uint   `json:"id"`
	Name      string `json:"name"`
}

// ChecklistResponse defines model for ChecklistResponse.
type ChecklistResponse struct {
	Id    uint                     `json:"id"`
	Items *[]ChecklistItemResponse `json:"items,omitempty"`
	Name  string                   `json:"name"`
}

// ChecklistUpdateAndCreateRequest defines model for ChecklistUpdateAndCreateRequest.
type ChecklistUpdateAndCreateRequest struct {
	Name string `json:"name"`
}

// CreateChecklistRequest defines model for CreateChecklistRequest.
type CreateChecklistRequest = ChecklistUpdateAndCreateRequest

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// CreateChecklistJSONRequestBody defines body for CreateChecklist for application/json ContentType.
type CreateChecklistJSONRequestBody = CreateChecklistRequest

// UpdateChecklistByIdJSONRequestBody defines body for UpdateChecklistById for application/json ContentType.
type UpdateChecklistByIdJSONRequestBody = CreateChecklistRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all checklists
	// (GET /api/v1/checklist)
	GetAllChecklists(c *gin.Context)
	// Create a new checklist
	// (POST /api/v1/checklist)
	CreateChecklist(c *gin.Context)
	// Delete checklist by ID
	// (DELETE /api/v1/checklist/{checklistId})
	DeleteChecklistById(c *gin.Context, checklistId uint)
	// Get checklist by ID
	// (GET /api/v1/checklist/{checklistId})
	GetChecklistById(c *gin.Context, checklistId uint)
	// Update checklist by ID
	// (PUT /api/v1/checklist/{checklistId})
	UpdateChecklistById(c *gin.Context, checklistId uint)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAllChecklists operation middleware
func (siw *ServerInterfaceWrapper) GetAllChecklists(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllChecklists(c)
}

// CreateChecklist operation middleware
func (siw *ServerInterfaceWrapper) CreateChecklist(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateChecklist(c)
}

// DeleteChecklistById operation middleware
func (siw *ServerInterfaceWrapper) DeleteChecklistById(c *gin.Context) {

	var err error

	// ------------- Path parameter "checklistId" -------------
	var checklistId uint

	err = runtime.BindStyledParameterWithOptions("simple", "checklistId", c.Param("checklistId"), &checklistId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter checklistId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteChecklistById(c, checklistId)
}

// GetChecklistById operation middleware
func (siw *ServerInterfaceWrapper) GetChecklistById(c *gin.Context) {

	var err error

	// ------------- Path parameter "checklistId" -------------
	var checklistId uint

	err = runtime.BindStyledParameterWithOptions("simple", "checklistId", c.Param("checklistId"), &checklistId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter checklistId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChecklistById(c, checklistId)
}

// UpdateChecklistById operation middleware
func (siw *ServerInterfaceWrapper) UpdateChecklistById(c *gin.Context) {

	var err error

	// ------------- Path parameter "checklistId" -------------
	var checklistId uint

	err = runtime.BindStyledParameterWithOptions("simple", "checklistId", c.Param("checklistId"), &checklistId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter checklistId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateChecklistById(c, checklistId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/checklist", wrapper.GetAllChecklists)
	router.POST(options.BaseURL+"/api/v1/checklist", wrapper.CreateChecklist)
	router.DELETE(options.BaseURL+"/api/v1/checklist/:checklistId", wrapper.DeleteChecklistById)
	router.GET(options.BaseURL+"/api/v1/checklist/:checklistId", wrapper.GetChecklistById)
	router.PUT(options.BaseURL+"/api/v1/checklist/:checklistId", wrapper.UpdateChecklistById)
}

type GetAllChecklistsRequestObject struct {
}

type GetAllChecklistsResponseObject interface {
	VisitGetAllChecklistsResponse(w http.ResponseWriter) error
}

type GetAllChecklists200JSONResponse []ChecklistResponse

func (response GetAllChecklists200JSONResponse) VisitGetAllChecklistsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllChecklists400JSONResponse Error

func (response GetAllChecklists400JSONResponse) VisitGetAllChecklistsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllChecklists500JSONResponse Error

func (response GetAllChecklists500JSONResponse) VisitGetAllChecklistsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateChecklistRequestObject struct {
	Body *CreateChecklistJSONRequestBody
}

type CreateChecklistResponseObject interface {
	VisitCreateChecklistResponse(w http.ResponseWriter) error
}

type CreateChecklist201JSONResponse ChecklistResponse

func (response CreateChecklist201JSONResponse) VisitCreateChecklistResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateChecklist400JSONResponse Error

func (response CreateChecklist400JSONResponse) VisitCreateChecklistResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateChecklist500JSONResponse Error

func (response CreateChecklist500JSONResponse) VisitCreateChecklistResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChecklistByIdRequestObject struct {
	ChecklistId uint `json:"checklistId"`
}

type DeleteChecklistByIdResponseObject interface {
	VisitDeleteChecklistByIdResponse(w http.ResponseWriter) error
}

type DeleteChecklistById204JSONResponse ChecklistResponse

func (response DeleteChecklistById204JSONResponse) VisitDeleteChecklistByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(204)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChecklistById404JSONResponse Error

func (response DeleteChecklistById404JSONResponse) VisitDeleteChecklistByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChecklistById500JSONResponse Error

func (response DeleteChecklistById500JSONResponse) VisitDeleteChecklistByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetChecklistByIdRequestObject struct {
	ChecklistId uint `json:"checklistId"`
}

type GetChecklistByIdResponseObject interface {
	VisitGetChecklistByIdResponse(w http.ResponseWriter) error
}

type GetChecklistById200JSONResponse ChecklistResponse

func (response GetChecklistById200JSONResponse) VisitGetChecklistByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChecklistById400JSONResponse Error

func (response GetChecklistById400JSONResponse) VisitGetChecklistByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetChecklistById404JSONResponse Error

func (response GetChecklistById404JSONResponse) VisitGetChecklistByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetChecklistById500JSONResponse Error

func (response GetChecklistById500JSONResponse) VisitGetChecklistByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateChecklistByIdRequestObject struct {
	ChecklistId uint `json:"checklistId"`
	Body        *UpdateChecklistByIdJSONRequestBody
}

type UpdateChecklistByIdResponseObject interface {
	VisitUpdateChecklistByIdResponse(w http.ResponseWriter) error
}

type UpdateChecklistById200JSONResponse ChecklistResponse

func (response UpdateChecklistById200JSONResponse) VisitUpdateChecklistByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateChecklistById400JSONResponse Error

func (response UpdateChecklistById400JSONResponse) VisitUpdateChecklistByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateChecklistById404JSONResponse Error

func (response UpdateChecklistById404JSONResponse) VisitUpdateChecklistByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateChecklistById500JSONResponse Error

func (response UpdateChecklistById500JSONResponse) VisitUpdateChecklistByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all checklists
	// (GET /api/v1/checklist)
	GetAllChecklists(ctx context.Context, request GetAllChecklistsRequestObject) (GetAllChecklistsResponseObject, error)
	// Create a new checklist
	// (POST /api/v1/checklist)
	CreateChecklist(ctx context.Context, request CreateChecklistRequestObject) (CreateChecklistResponseObject, error)
	// Delete checklist by ID
	// (DELETE /api/v1/checklist/{checklistId})
	DeleteChecklistById(ctx context.Context, request DeleteChecklistByIdRequestObject) (DeleteChecklistByIdResponseObject, error)
	// Get checklist by ID
	// (GET /api/v1/checklist/{checklistId})
	GetChecklistById(ctx context.Context, request GetChecklistByIdRequestObject) (GetChecklistByIdResponseObject, error)
	// Update checklist by ID
	// (PUT /api/v1/checklist/{checklistId})
	UpdateChecklistById(ctx context.Context, request UpdateChecklistByIdRequestObject) (UpdateChecklistByIdResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAllChecklists operation middleware
func (sh *strictHandler) GetAllChecklists(ctx *gin.Context) {
	var request GetAllChecklistsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllChecklists(ctx, request.(GetAllChecklistsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllChecklists")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllChecklistsResponseObject); ok {
		if err := validResponse.VisitGetAllChecklistsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateChecklist operation middleware
func (sh *strictHandler) CreateChecklist(ctx *gin.Context) {
	var request CreateChecklistRequestObject

	var body CreateChecklistJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateChecklist(ctx, request.(CreateChecklistRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateChecklist")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateChecklistResponseObject); ok {
		if err := validResponse.VisitCreateChecklistResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteChecklistById operation middleware
func (sh *strictHandler) DeleteChecklistById(ctx *gin.Context, checklistId uint) {
	var request DeleteChecklistByIdRequestObject

	request.ChecklistId = checklistId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteChecklistById(ctx, request.(DeleteChecklistByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteChecklistById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteChecklistByIdResponseObject); ok {
		if err := validResponse.VisitDeleteChecklistByIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChecklistById operation middleware
func (sh *strictHandler) GetChecklistById(ctx *gin.Context, checklistId uint) {
	var request GetChecklistByIdRequestObject

	request.ChecklistId = checklistId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChecklistById(ctx, request.(GetChecklistByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChecklistById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChecklistByIdResponseObject); ok {
		if err := validResponse.VisitGetChecklistByIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateChecklistById operation middleware
func (sh *strictHandler) UpdateChecklistById(ctx *gin.Context, checklistId uint) {
	var request UpdateChecklistByIdRequestObject

	request.ChecklistId = checklistId

	var body UpdateChecklistByIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateChecklistById(ctx, request.(UpdateChecklistByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateChecklistById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateChecklistByIdResponseObject); ok {
		if err := validResponse.VisitUpdateChecklistByIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
