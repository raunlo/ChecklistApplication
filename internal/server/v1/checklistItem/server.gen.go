// Package checklistItem provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package checklistItem

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// Defines values for ListChecklistItemsParamsSort.
const (
	ListChecklistItemsParamsSortAsc  ListChecklistItemsParamsSort = "asc"
	ListChecklistItemsParamsSortDesc ListChecklistItemsParamsSort = "desc"
)

// Defines values for ChangeChecklistItemOrderParamsSortOrder.
const (
	ChangeChecklistItemOrderParamsSortOrderAsc  ChangeChecklistItemOrderParamsSortOrder = "asc"
	ChangeChecklistItemOrderParamsSortOrderDesc ChangeChecklistItemOrderParamsSortOrder = "desc"
)

// ChecklistItemResponse defines model for ChecklistItemResponse.
type ChecklistItemResponse struct {
	Completed   bool                       `json:"completed"`
	Id          uint                       `json:"id"`
	Name        string                     `json:"name"`
	OrderNumber uint                       `json:"orderNumber"`
	Rows        []ChecklistItemRowResponse `json:"rows"`
}

// ChecklistItemRowResponse defines model for ChecklistItemRowResponse.
type ChecklistItemRowResponse struct {
	Completed *bool  `json:"completed"`
	Id        uint   `json:"id"`
	Name      string `json:"name"`
}

// CreateChecklistItemRequest defines model for CreateChecklistItemRequest.
type CreateChecklistItemRequest struct {
	Name string                                   `json:"name"`
	Rows *[]CreateOrUpdateChecklistItemRowRequest `json:"rows,omitempty"`
}

// CreateChecklistItemRowRequest defines model for CreateChecklistItemRowRequest.
type CreateChecklistItemRowRequest = CreateOrUpdateChecklistItemRowRequest

// CreateOrUpdateChecklistItemRowRequest defines model for CreateOrUpdateChecklistItemRowRequest.
type CreateOrUpdateChecklistItemRowRequest struct {
	Completed *bool  `json:"completed"`
	Name      string `json:"name"`
}

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// UpdateChecklistItemRequest defines model for UpdateChecklistItemRequest.
type UpdateChecklistItemRequest struct {
	Completed bool   `json:"completed"`
	Name      string `json:"name"`
	Rows      []struct {
		Completed *bool  `json:"completed"`
		Id        uint   `json:"id"`
		Name      string `json:"name"`
	} `json:"rows"`
}

// ListChecklistItemsParams defines parameters for ListChecklistItems.
type ListChecklistItemsParams struct {
	// Sort Sort order
	Sort *ListChecklistItemsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Completed Filter by completed status
	Completed *bool `form:"completed,omitempty" json:"completed,omitempty"`
}

// ListChecklistItemsParamsSort defines parameters for ListChecklistItems.
type ListChecklistItemsParamsSort string

// ChangeChecklistItemOrderJSONBody defines parameters for ChangeChecklistItemOrder.
type ChangeChecklistItemOrderJSONBody struct {
	NewOrderNumber uint `json:"newOrderNumber"`
}

// ChangeChecklistItemOrderParams defines parameters for ChangeChecklistItemOrder.
type ChangeChecklistItemOrderParams struct {
	SortOrder *ChangeChecklistItemOrderParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`
}

// ChangeChecklistItemOrderParamsSortOrder defines parameters for ChangeChecklistItemOrder.
type ChangeChecklistItemOrderParamsSortOrder string

// CreateChecklistItemJSONRequestBody defines body for CreateChecklistItem for application/json ContentType.
type CreateChecklistItemJSONRequestBody = CreateChecklistItemRequest

// UpdateChecklistItemJSONRequestBody defines body for UpdateChecklistItem for application/json ContentType.
type UpdateChecklistItemJSONRequestBody = UpdateChecklistItemRequest

// ChangeChecklistItemOrderJSONRequestBody defines body for ChangeChecklistItemOrder for application/json ContentType.
type ChangeChecklistItemOrderJSONRequestBody ChangeChecklistItemOrderJSONBody

// CreateChecklistItemRowJSONRequestBody defines body for CreateChecklistItemRow for application/json ContentType.
type CreateChecklistItemRowJSONRequestBody = CreateChecklistItemRowRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List checklist items
	// (GET /api/v1/checklists/{checklistId}/items)
	ListChecklistItems(c *gin.Context, checklistId uint, params ListChecklistItemsParams)
	// Create a checklist item
	// (POST /api/v1/checklists/{checklistId}/items)
	CreateChecklistItem(c *gin.Context, checklistId uint)
	// Delete a checklist item
	// (DELETE /api/v1/checklists/{checklistId}/items/{itemId})
	DeleteChecklistItem(c *gin.Context, checklistId uint, itemId uint)
	// Get a checklist item
	// (GET /api/v1/checklists/{checklistId}/items/{itemId})
	GetChecklistItem(c *gin.Context, checklistId uint, itemId uint)
	// Update a checklist item
	// (PUT /api/v1/checklists/{checklistId}/items/{itemId})
	UpdateChecklistItem(c *gin.Context, checklistId uint, itemId uint)
	// Change checklist item order
	// (PATCH /api/v1/checklists/{checklistId}/items/{itemId}/change-order)
	ChangeChecklistItemOrder(c *gin.Context, checklistId uint, itemId uint, params ChangeChecklistItemOrderParams)
	// Create a checklist item row
	// (POST /api/v1/checklists/{checklistId}/items/{itemId}/rows)
	CreateChecklistItemRow(c *gin.Context, checklistId uint, itemId uint)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListChecklistItems operation middleware
func (siw *ServerInterfaceWrapper) ListChecklistItems(c *gin.Context) {

	var err error

	// ------------- Path parameter "checklistId" -------------
	var checklistId uint

	err = runtime.BindStyledParameterWithOptions("simple", "checklistId", c.Param("checklistId"), &checklistId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter checklistId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListChecklistItemsParams

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sort: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "completed" -------------

	err = runtime.BindQueryParameter("form", true, false, "completed", c.Request.URL.Query(), &params.Completed)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter completed: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListChecklistItems(c, checklistId, params)
}

// CreateChecklistItem operation middleware
func (siw *ServerInterfaceWrapper) CreateChecklistItem(c *gin.Context) {

	var err error

	// ------------- Path parameter "checklistId" -------------
	var checklistId uint

	err = runtime.BindStyledParameterWithOptions("simple", "checklistId", c.Param("checklistId"), &checklistId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter checklistId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateChecklistItem(c, checklistId)
}

// DeleteChecklistItem operation middleware
func (siw *ServerInterfaceWrapper) DeleteChecklistItem(c *gin.Context) {

	var err error

	// ------------- Path parameter "checklistId" -------------
	var checklistId uint

	err = runtime.BindStyledParameterWithOptions("simple", "checklistId", c.Param("checklistId"), &checklistId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter checklistId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "itemId" -------------
	var itemId uint

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", c.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter itemId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteChecklistItem(c, checklistId, itemId)
}

// GetChecklistItem operation middleware
func (siw *ServerInterfaceWrapper) GetChecklistItem(c *gin.Context) {

	var err error

	// ------------- Path parameter "checklistId" -------------
	var checklistId uint

	err = runtime.BindStyledParameterWithOptions("simple", "checklistId", c.Param("checklistId"), &checklistId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter checklistId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "itemId" -------------
	var itemId uint

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", c.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter itemId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChecklistItem(c, checklistId, itemId)
}

// UpdateChecklistItem operation middleware
func (siw *ServerInterfaceWrapper) UpdateChecklistItem(c *gin.Context) {

	var err error

	// ------------- Path parameter "checklistId" -------------
	var checklistId uint

	err = runtime.BindStyledParameterWithOptions("simple", "checklistId", c.Param("checklistId"), &checklistId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter checklistId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "itemId" -------------
	var itemId uint

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", c.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter itemId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateChecklistItem(c, checklistId, itemId)
}

// ChangeChecklistItemOrder operation middleware
func (siw *ServerInterfaceWrapper) ChangeChecklistItemOrder(c *gin.Context) {

	var err error

	// ------------- Path parameter "checklistId" -------------
	var checklistId uint

	err = runtime.BindStyledParameterWithOptions("simple", "checklistId", c.Param("checklistId"), &checklistId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter checklistId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "itemId" -------------
	var itemId uint

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", c.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter itemId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ChangeChecklistItemOrderParams

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", c.Request.URL.Query(), &params.SortOrder)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortOrder: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangeChecklistItemOrder(c, checklistId, itemId, params)
}

// CreateChecklistItemRow operation middleware
func (siw *ServerInterfaceWrapper) CreateChecklistItemRow(c *gin.Context) {

	var err error

	// ------------- Path parameter "checklistId" -------------
	var checklistId uint

	err = runtime.BindStyledParameterWithOptions("simple", "checklistId", c.Param("checklistId"), &checklistId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter checklistId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "itemId" -------------
	var itemId uint

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", c.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter itemId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateChecklistItemRow(c, checklistId, itemId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/checklists/:checklistId/items", wrapper.ListChecklistItems)
	router.POST(options.BaseURL+"/api/v1/checklists/:checklistId/items", wrapper.CreateChecklistItem)
	router.DELETE(options.BaseURL+"/api/v1/checklists/:checklistId/items/:itemId", wrapper.DeleteChecklistItem)
	router.GET(options.BaseURL+"/api/v1/checklists/:checklistId/items/:itemId", wrapper.GetChecklistItem)
	router.PUT(options.BaseURL+"/api/v1/checklists/:checklistId/items/:itemId", wrapper.UpdateChecklistItem)
	router.PATCH(options.BaseURL+"/api/v1/checklists/:checklistId/items/:itemId/change-order", wrapper.ChangeChecklistItemOrder)
	router.POST(options.BaseURL+"/api/v1/checklists/:checklistId/items/:itemId/rows", wrapper.CreateChecklistItemRow)
}

type ListChecklistItemsRequestObject struct {
	ChecklistId uint `json:"checklistId"`
	Params      ListChecklistItemsParams
}

type ListChecklistItemsResponseObject interface {
	VisitListChecklistItemsResponse(w http.ResponseWriter) error
}

type ListChecklistItems200JSONResponse []ChecklistItemResponse

func (response ListChecklistItems200JSONResponse) VisitListChecklistItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListChecklistItems400JSONResponse Error

func (response ListChecklistItems400JSONResponse) VisitListChecklistItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListChecklistItems500JSONResponse Error

func (response ListChecklistItems500JSONResponse) VisitListChecklistItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateChecklistItemRequestObject struct {
	ChecklistId uint `json:"checklistId"`
	Body        *CreateChecklistItemJSONRequestBody
}

type CreateChecklistItemResponseObject interface {
	VisitCreateChecklistItemResponse(w http.ResponseWriter) error
}

type CreateChecklistItem201JSONResponse ChecklistItemResponse

func (response CreateChecklistItem201JSONResponse) VisitCreateChecklistItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateChecklistItem400JSONResponse Error

func (response CreateChecklistItem400JSONResponse) VisitCreateChecklistItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateChecklistItem500JSONResponse Error

func (response CreateChecklistItem500JSONResponse) VisitCreateChecklistItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChecklistItemRequestObject struct {
	ChecklistId uint `json:"checklistId"`
	ItemId      uint `json:"itemId"`
}

type DeleteChecklistItemResponseObject interface {
	VisitDeleteChecklistItemResponse(w http.ResponseWriter) error
}

type DeleteChecklistItem204JSONResponse ChecklistItemResponse

func (response DeleteChecklistItem204JSONResponse) VisitDeleteChecklistItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(204)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChecklistItem404JSONResponse Error

func (response DeleteChecklistItem404JSONResponse) VisitDeleteChecklistItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChecklistItem500JSONResponse Error

func (response DeleteChecklistItem500JSONResponse) VisitDeleteChecklistItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetChecklistItemRequestObject struct {
	ChecklistId uint `json:"checklistId"`
	ItemId      uint `json:"itemId"`
}

type GetChecklistItemResponseObject interface {
	VisitGetChecklistItemResponse(w http.ResponseWriter) error
}

type GetChecklistItem200JSONResponse ChecklistItemResponse

func (response GetChecklistItem200JSONResponse) VisitGetChecklistItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChecklistItem404JSONResponse Error

func (response GetChecklistItem404JSONResponse) VisitGetChecklistItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetChecklistItem500JSONResponse Error

func (response GetChecklistItem500JSONResponse) VisitGetChecklistItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateChecklistItemRequestObject struct {
	ChecklistId uint `json:"checklistId"`
	ItemId      uint `json:"itemId"`
	Body        *UpdateChecklistItemJSONRequestBody
}

type UpdateChecklistItemResponseObject interface {
	VisitUpdateChecklistItemResponse(w http.ResponseWriter) error
}

type UpdateChecklistItem200JSONResponse ChecklistItemResponse

func (response UpdateChecklistItem200JSONResponse) VisitUpdateChecklistItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateChecklistItem404JSONResponse Error

func (response UpdateChecklistItem404JSONResponse) VisitUpdateChecklistItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateChecklistItem500JSONResponse Error

func (response UpdateChecklistItem500JSONResponse) VisitUpdateChecklistItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ChangeChecklistItemOrderRequestObject struct {
	ChecklistId uint `json:"checklistId"`
	ItemId      uint `json:"itemId"`
	Params      ChangeChecklistItemOrderParams
	Body        *ChangeChecklistItemOrderJSONRequestBody
}

type ChangeChecklistItemOrderResponseObject interface {
	VisitChangeChecklistItemOrderResponse(w http.ResponseWriter) error
}

type ChangeChecklistItemOrder200JSONResponse struct {
	NewOrderNumber *uint `json:"newOrderNumber,omitempty"`
	OldOrderNumber *uint `json:"oldOrderNumber,omitempty"`
}

func (response ChangeChecklistItemOrder200JSONResponse) VisitChangeChecklistItemOrderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ChangeChecklistItemOrder400JSONResponse Error

func (response ChangeChecklistItemOrder400JSONResponse) VisitChangeChecklistItemOrderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ChangeChecklistItemOrder404JSONResponse Error

func (response ChangeChecklistItemOrder404JSONResponse) VisitChangeChecklistItemOrderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ChangeChecklistItemOrder500JSONResponse Error

func (response ChangeChecklistItemOrder500JSONResponse) VisitChangeChecklistItemOrderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateChecklistItemRowRequestObject struct {
	ChecklistId uint `json:"checklistId"`
	ItemId      uint `json:"itemId"`
	Body        *CreateChecklistItemRowJSONRequestBody
}

type CreateChecklistItemRowResponseObject interface {
	VisitCreateChecklistItemRowResponse(w http.ResponseWriter) error
}

type CreateChecklistItemRow201JSONResponse ChecklistItemRowResponse

func (response CreateChecklistItemRow201JSONResponse) VisitCreateChecklistItemRowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateChecklistItemRow400JSONResponse Error

func (response CreateChecklistItemRow400JSONResponse) VisitCreateChecklistItemRowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateChecklistItemRow404JSONResponse Error

func (response CreateChecklistItemRow404JSONResponse) VisitCreateChecklistItemRowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateChecklistItemRow500JSONResponse Error

func (response CreateChecklistItemRow500JSONResponse) VisitCreateChecklistItemRowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List checklist items
	// (GET /api/v1/checklists/{checklistId}/items)
	ListChecklistItems(ctx context.Context, request ListChecklistItemsRequestObject) (ListChecklistItemsResponseObject, error)
	// Create a checklist item
	// (POST /api/v1/checklists/{checklistId}/items)
	CreateChecklistItem(ctx context.Context, request CreateChecklistItemRequestObject) (CreateChecklistItemResponseObject, error)
	// Delete a checklist item
	// (DELETE /api/v1/checklists/{checklistId}/items/{itemId})
	DeleteChecklistItem(ctx context.Context, request DeleteChecklistItemRequestObject) (DeleteChecklistItemResponseObject, error)
	// Get a checklist item
	// (GET /api/v1/checklists/{checklistId}/items/{itemId})
	GetChecklistItem(ctx context.Context, request GetChecklistItemRequestObject) (GetChecklistItemResponseObject, error)
	// Update a checklist item
	// (PUT /api/v1/checklists/{checklistId}/items/{itemId})
	UpdateChecklistItem(ctx context.Context, request UpdateChecklistItemRequestObject) (UpdateChecklistItemResponseObject, error)
	// Change checklist item order
	// (PATCH /api/v1/checklists/{checklistId}/items/{itemId}/change-order)
	ChangeChecklistItemOrder(ctx context.Context, request ChangeChecklistItemOrderRequestObject) (ChangeChecklistItemOrderResponseObject, error)
	// Create a checklist item row
	// (POST /api/v1/checklists/{checklistId}/items/{itemId}/rows)
	CreateChecklistItemRow(ctx context.Context, request CreateChecklistItemRowRequestObject) (CreateChecklistItemRowResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ListChecklistItems operation middleware
func (sh *strictHandler) ListChecklistItems(ctx *gin.Context, checklistId uint, params ListChecklistItemsParams) {
	var request ListChecklistItemsRequestObject

	request.ChecklistId = checklistId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListChecklistItems(ctx, request.(ListChecklistItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListChecklistItems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListChecklistItemsResponseObject); ok {
		if err := validResponse.VisitListChecklistItemsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateChecklistItem operation middleware
func (sh *strictHandler) CreateChecklistItem(ctx *gin.Context, checklistId uint) {
	var request CreateChecklistItemRequestObject

	request.ChecklistId = checklistId

	var body CreateChecklistItemJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateChecklistItem(ctx, request.(CreateChecklistItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateChecklistItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateChecklistItemResponseObject); ok {
		if err := validResponse.VisitCreateChecklistItemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteChecklistItem operation middleware
func (sh *strictHandler) DeleteChecklistItem(ctx *gin.Context, checklistId uint, itemId uint) {
	var request DeleteChecklistItemRequestObject

	request.ChecklistId = checklistId
	request.ItemId = itemId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteChecklistItem(ctx, request.(DeleteChecklistItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteChecklistItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteChecklistItemResponseObject); ok {
		if err := validResponse.VisitDeleteChecklistItemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChecklistItem operation middleware
func (sh *strictHandler) GetChecklistItem(ctx *gin.Context, checklistId uint, itemId uint) {
	var request GetChecklistItemRequestObject

	request.ChecklistId = checklistId
	request.ItemId = itemId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChecklistItem(ctx, request.(GetChecklistItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChecklistItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChecklistItemResponseObject); ok {
		if err := validResponse.VisitGetChecklistItemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateChecklistItem operation middleware
func (sh *strictHandler) UpdateChecklistItem(ctx *gin.Context, checklistId uint, itemId uint) {
	var request UpdateChecklistItemRequestObject

	request.ChecklistId = checklistId
	request.ItemId = itemId

	var body UpdateChecklistItemJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateChecklistItem(ctx, request.(UpdateChecklistItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateChecklistItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateChecklistItemResponseObject); ok {
		if err := validResponse.VisitUpdateChecklistItemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ChangeChecklistItemOrder operation middleware
func (sh *strictHandler) ChangeChecklistItemOrder(ctx *gin.Context, checklistId uint, itemId uint, params ChangeChecklistItemOrderParams) {
	var request ChangeChecklistItemOrderRequestObject

	request.ChecklistId = checklistId
	request.ItemId = itemId
	request.Params = params

	var body ChangeChecklistItemOrderJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ChangeChecklistItemOrder(ctx, request.(ChangeChecklistItemOrderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ChangeChecklistItemOrder")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ChangeChecklistItemOrderResponseObject); ok {
		if err := validResponse.VisitChangeChecklistItemOrderResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateChecklistItemRow operation middleware
func (sh *strictHandler) CreateChecklistItemRow(ctx *gin.Context, checklistId uint, itemId uint) {
	var request CreateChecklistItemRowRequestObject

	request.ChecklistId = checklistId
	request.ItemId = itemId

	var body CreateChecklistItemRowJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateChecklistItemRow(ctx, request.(CreateChecklistItemRowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateChecklistItemRow")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateChecklistItemRowResponseObject); ok {
		if err := validResponse.VisitCreateChecklistItemRowResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
