// Package checklistItem provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package checklistItem

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// Defines values for GetAllChecklistItemsParamsSort.
const (
	GetAllChecklistItemsParamsSortAsc  GetAllChecklistItemsParamsSort = "asc"
	GetAllChecklistItemsParamsSortDesc GetAllChecklistItemsParamsSort = "desc"
)

// Defines values for ChangeChecklistItemOrderNumberParamsSortOrder.
const (
	ChangeChecklistItemOrderNumberParamsSortOrderAsc  ChangeChecklistItemOrderNumberParamsSortOrder = "asc"
	ChangeChecklistItemOrderNumberParamsSortOrderDesc ChangeChecklistItemOrderNumberParamsSortOrder = "desc"
)

// ChecklistItemResponse defines model for ChecklistItemResponse.
type ChecklistItemResponse struct {
	Completed   bool                       `json:"completed"`
	Id          uint                       `json:"id"`
	Name        string                     `json:"name"`
	OrderNumber uint                       `json:"orderNumber"`
	Rows        []ChecklistItemRowResponse `json:"rows"`
}

// ChecklistItemRowResponse defines model for ChecklistItemRowResponse.
type ChecklistItemRowResponse struct {
	Completed *bool  `json:"completed"`
	Id        uint   `json:"id"`
	Name      string `json:"name"`
}

// CreateChecklistItemRequest defines model for CreateChecklistItemRequest.
type CreateChecklistItemRequest struct {
	Name string                                   `json:"name"`
	Rows *[]CreateOrUpdateChecklistItemRowRequest `json:"rows,omitempty"`
}

// CreateChecklistItemRowRequest defines model for CreateChecklistItemRowRequest.
type CreateChecklistItemRowRequest = CreateOrUpdateChecklistItemRowRequest

// CreateOrUpdateChecklistItemRowRequest defines model for CreateOrUpdateChecklistItemRowRequest.
type CreateOrUpdateChecklistItemRowRequest struct {
	Completed *bool  `json:"completed"`
	Name      string `json:"name"`
}

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// UpdateChecklistItemRequest defines model for UpdateChecklistItemRequest.
type UpdateChecklistItemRequest struct {
	Completed bool   `json:"completed"`
	Id        uint   `json:"id"`
	Name      string `json:"name"`
	Rows      []struct {
		Completed *bool  `json:"completed"`
		Id        uint   `json:"id"`
		Name      string `json:"name"`
	} `json:"rows"`
}

// GetAllChecklistItemsParams defines parameters for GetAllChecklistItems.
type GetAllChecklistItemsParams struct {
	// Sort Sort order
	Sort *GetAllChecklistItemsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Completed Filter by completed status
	Completed *bool `form:"completed,omitempty" json:"completed,omitempty"`
}

// GetAllChecklistItemsParamsSort defines parameters for GetAllChecklistItems.
type GetAllChecklistItemsParamsSort string

// ChangeChecklistItemOrderNumberJSONBody defines parameters for ChangeChecklistItemOrderNumber.
type ChangeChecklistItemOrderNumberJSONBody struct {
	NewOrderNumber uint `json:"newOrderNumber"`
}

// ChangeChecklistItemOrderNumberParams defines parameters for ChangeChecklistItemOrderNumber.
type ChangeChecklistItemOrderNumberParams struct {
	SortOrder *ChangeChecklistItemOrderNumberParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`
}

// ChangeChecklistItemOrderNumberParamsSortOrder defines parameters for ChangeChecklistItemOrderNumber.
type ChangeChecklistItemOrderNumberParamsSortOrder string

// CreateChecklistItemJSONRequestBody defines body for CreateChecklistItem for application/json ContentType.
type CreateChecklistItemJSONRequestBody = CreateChecklistItemRequest

// UpdateChecklistItemBychecklistIdAndItemIdJSONRequestBody defines body for UpdateChecklistItemBychecklistIdAndItemId for application/json ContentType.
type UpdateChecklistItemBychecklistIdAndItemIdJSONRequestBody = UpdateChecklistItemRequest

// ChangeChecklistItemOrderNumberJSONRequestBody defines body for ChangeChecklistItemOrderNumber for application/json ContentType.
type ChangeChecklistItemOrderNumberJSONRequestBody ChangeChecklistItemOrderNumberJSONBody

// CreateChecklistItemRowJSONRequestBody defines body for CreateChecklistItemRow for application/json ContentType.
type CreateChecklistItemRowJSONRequestBody = CreateChecklistItemRowRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all checklist items by checklist ID
	// (GET /api/v1/checklists/{checklistId}/items)
	GetAllChecklistItems(c *gin.Context, checklistId uint, params GetAllChecklistItemsParams)
	// Create a new checklist item
	// (POST /api/v1/checklists/{checklistId}/items)
	CreateChecklistItem(c *gin.Context, checklistId uint)
	// Delete checklist item by checklistId and checklistItemId
	// (DELETE /api/v1/checklists/{checklistId}/items/{itemId})
	DeleteChecklistItemById(c *gin.Context, checklistId uint, itemId uint)
	// Get checklist item by checklist id and item id
	// (GET /api/v1/checklists/{checklistId}/items/{itemId})
	GetChecklistItemBychecklistIdAndItemId(c *gin.Context, checklistId uint, itemId uint)
	// Update checklist item by checklist id and item id
	// (PUT /api/v1/checklists/{checklistId}/items/{itemId})
	UpdateChecklistItemBychecklistIdAndItemId(c *gin.Context, checklistId uint, itemId uint)
	// Change checklist item order number
	// (PATCH /api/v1/checklists/{checklistId}/items/{itemId}/change-order)
	ChangeChecklistItemOrderNumber(c *gin.Context, checklistId uint, itemId uint, params ChangeChecklistItemOrderNumberParams)
	// Create checklist item row
	// (POST /api/v1/checklists/{checklistId}/items/{itemId}/rows)
	CreateChecklistItemRow(c *gin.Context, checklistId uint, itemId uint)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAllChecklistItems operation middleware
func (siw *ServerInterfaceWrapper) GetAllChecklistItems(c *gin.Context) {

	var err error

	// ------------- Path parameter "checklistId" -------------
	var checklistId uint

	err = runtime.BindStyledParameterWithOptions("simple", "checklistId", c.Param("checklistId"), &checklistId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter checklistId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllChecklistItemsParams

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sort: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "completed" -------------

	err = runtime.BindQueryParameter("form", true, false, "completed", c.Request.URL.Query(), &params.Completed)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter completed: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllChecklistItems(c, checklistId, params)
}

// CreateChecklistItem operation middleware
func (siw *ServerInterfaceWrapper) CreateChecklistItem(c *gin.Context) {

	var err error

	// ------------- Path parameter "checklistId" -------------
	var checklistId uint

	err = runtime.BindStyledParameterWithOptions("simple", "checklistId", c.Param("checklistId"), &checklistId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter checklistId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateChecklistItem(c, checklistId)
}

// DeleteChecklistItemById operation middleware
func (siw *ServerInterfaceWrapper) DeleteChecklistItemById(c *gin.Context) {

	var err error

	// ------------- Path parameter "checklistId" -------------
	var checklistId uint

	err = runtime.BindStyledParameterWithOptions("simple", "checklistId", c.Param("checklistId"), &checklistId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter checklistId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "itemId" -------------
	var itemId uint

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", c.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter itemId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteChecklistItemById(c, checklistId, itemId)
}

// GetChecklistItemBychecklistIdAndItemId operation middleware
func (siw *ServerInterfaceWrapper) GetChecklistItemBychecklistIdAndItemId(c *gin.Context) {

	var err error

	// ------------- Path parameter "checklistId" -------------
	var checklistId uint

	err = runtime.BindStyledParameterWithOptions("simple", "checklistId", c.Param("checklistId"), &checklistId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter checklistId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "itemId" -------------
	var itemId uint

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", c.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter itemId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChecklistItemBychecklistIdAndItemId(c, checklistId, itemId)
}

// UpdateChecklistItemBychecklistIdAndItemId operation middleware
func (siw *ServerInterfaceWrapper) UpdateChecklistItemBychecklistIdAndItemId(c *gin.Context) {

	var err error

	// ------------- Path parameter "checklistId" -------------
	var checklistId uint

	err = runtime.BindStyledParameterWithOptions("simple", "checklistId", c.Param("checklistId"), &checklistId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter checklistId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "itemId" -------------
	var itemId uint

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", c.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter itemId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateChecklistItemBychecklistIdAndItemId(c, checklistId, itemId)
}

// ChangeChecklistItemOrderNumber operation middleware
func (siw *ServerInterfaceWrapper) ChangeChecklistItemOrderNumber(c *gin.Context) {

	var err error

	// ------------- Path parameter "checklistId" -------------
	var checklistId uint

	err = runtime.BindStyledParameterWithOptions("simple", "checklistId", c.Param("checklistId"), &checklistId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter checklistId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "itemId" -------------
	var itemId uint

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", c.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter itemId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ChangeChecklistItemOrderNumberParams

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", c.Request.URL.Query(), &params.SortOrder)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortOrder: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangeChecklistItemOrderNumber(c, checklistId, itemId, params)
}

// CreateChecklistItemRow operation middleware
func (siw *ServerInterfaceWrapper) CreateChecklistItemRow(c *gin.Context) {

	var err error

	// ------------- Path parameter "checklistId" -------------
	var checklistId uint

	err = runtime.BindStyledParameterWithOptions("simple", "checklistId", c.Param("checklistId"), &checklistId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter checklistId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "itemId" -------------
	var itemId uint

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", c.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter itemId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateChecklistItemRow(c, checklistId, itemId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/checklists/:checklistId/items", wrapper.GetAllChecklistItems)
	router.POST(options.BaseURL+"/api/v1/checklists/:checklistId/items", wrapper.CreateChecklistItem)
	router.DELETE(options.BaseURL+"/api/v1/checklists/:checklistId/items/:itemId", wrapper.DeleteChecklistItemById)
	router.GET(options.BaseURL+"/api/v1/checklists/:checklistId/items/:itemId", wrapper.GetChecklistItemBychecklistIdAndItemId)
	router.PUT(options.BaseURL+"/api/v1/checklists/:checklistId/items/:itemId", wrapper.UpdateChecklistItemBychecklistIdAndItemId)
	router.PATCH(options.BaseURL+"/api/v1/checklists/:checklistId/items/:itemId/change-order", wrapper.ChangeChecklistItemOrderNumber)
	router.POST(options.BaseURL+"/api/v1/checklists/:checklistId/items/:itemId/rows", wrapper.CreateChecklistItemRow)
}

type GetAllChecklistItemsRequestObject struct {
	ChecklistId uint `json:"checklistId"`
	Params      GetAllChecklistItemsParams
}

type GetAllChecklistItemsResponseObject interface {
	VisitGetAllChecklistItemsResponse(w http.ResponseWriter) error
}

type GetAllChecklistItems200JSONResponse []ChecklistItemResponse

func (response GetAllChecklistItems200JSONResponse) VisitGetAllChecklistItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllChecklistItems400JSONResponse Error

func (response GetAllChecklistItems400JSONResponse) VisitGetAllChecklistItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllChecklistItems500JSONResponse Error

func (response GetAllChecklistItems500JSONResponse) VisitGetAllChecklistItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateChecklistItemRequestObject struct {
	ChecklistId uint `json:"checklistId"`
	Body        *CreateChecklistItemJSONRequestBody
}

type CreateChecklistItemResponseObject interface {
	VisitCreateChecklistItemResponse(w http.ResponseWriter) error
}

type CreateChecklistItem201JSONResponse ChecklistItemResponse

func (response CreateChecklistItem201JSONResponse) VisitCreateChecklistItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateChecklistItem400JSONResponse Error

func (response CreateChecklistItem400JSONResponse) VisitCreateChecklistItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateChecklistItem500JSONResponse Error

func (response CreateChecklistItem500JSONResponse) VisitCreateChecklistItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChecklistItemByIdRequestObject struct {
	ChecklistId uint `json:"checklistId"`
	ItemId      uint `json:"itemId"`
}

type DeleteChecklistItemByIdResponseObject interface {
	VisitDeleteChecklistItemByIdResponse(w http.ResponseWriter) error
}

type DeleteChecklistItemById204JSONResponse ChecklistItemResponse

func (response DeleteChecklistItemById204JSONResponse) VisitDeleteChecklistItemByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(204)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChecklistItemById404JSONResponse Error

func (response DeleteChecklistItemById404JSONResponse) VisitDeleteChecklistItemByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChecklistItemById500JSONResponse Error

func (response DeleteChecklistItemById500JSONResponse) VisitDeleteChecklistItemByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetChecklistItemBychecklistIdAndItemIdRequestObject struct {
	ChecklistId uint `json:"checklistId"`
	ItemId      uint `json:"itemId"`
}

type GetChecklistItemBychecklistIdAndItemIdResponseObject interface {
	VisitGetChecklistItemBychecklistIdAndItemIdResponse(w http.ResponseWriter) error
}

type GetChecklistItemBychecklistIdAndItemId200JSONResponse ChecklistItemResponse

func (response GetChecklistItemBychecklistIdAndItemId200JSONResponse) VisitGetChecklistItemBychecklistIdAndItemIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChecklistItemBychecklistIdAndItemId404JSONResponse Error

func (response GetChecklistItemBychecklistIdAndItemId404JSONResponse) VisitGetChecklistItemBychecklistIdAndItemIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetChecklistItemBychecklistIdAndItemId500JSONResponse Error

func (response GetChecklistItemBychecklistIdAndItemId500JSONResponse) VisitGetChecklistItemBychecklistIdAndItemIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateChecklistItemBychecklistIdAndItemIdRequestObject struct {
	ChecklistId uint `json:"checklistId"`
	ItemId      uint `json:"itemId"`
	Body        *UpdateChecklistItemBychecklistIdAndItemIdJSONRequestBody
}

type UpdateChecklistItemBychecklistIdAndItemIdResponseObject interface {
	VisitUpdateChecklistItemBychecklistIdAndItemIdResponse(w http.ResponseWriter) error
}

type UpdateChecklistItemBychecklistIdAndItemId200JSONResponse ChecklistItemResponse

func (response UpdateChecklistItemBychecklistIdAndItemId200JSONResponse) VisitUpdateChecklistItemBychecklistIdAndItemIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateChecklistItemBychecklistIdAndItemId404JSONResponse Error

func (response UpdateChecklistItemBychecklistIdAndItemId404JSONResponse) VisitUpdateChecklistItemBychecklistIdAndItemIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateChecklistItemBychecklistIdAndItemId500JSONResponse Error

func (response UpdateChecklistItemBychecklistIdAndItemId500JSONResponse) VisitUpdateChecklistItemBychecklistIdAndItemIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ChangeChecklistItemOrderNumberRequestObject struct {
	ChecklistId uint `json:"checklistId"`
	ItemId      uint `json:"itemId"`
	Params      ChangeChecklistItemOrderNumberParams
	Body        *ChangeChecklistItemOrderNumberJSONRequestBody
}

type ChangeChecklistItemOrderNumberResponseObject interface {
	VisitChangeChecklistItemOrderNumberResponse(w http.ResponseWriter) error
}

type ChangeChecklistItemOrderNumber200JSONResponse struct {
	NewOrderNumber *uint `json:"newOrderNumber,omitempty"`
	OldOrderNumber *uint `json:"oldOrderNumber,omitempty"`
}

func (response ChangeChecklistItemOrderNumber200JSONResponse) VisitChangeChecklistItemOrderNumberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ChangeChecklistItemOrderNumber400JSONResponse Error

func (response ChangeChecklistItemOrderNumber400JSONResponse) VisitChangeChecklistItemOrderNumberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ChangeChecklistItemOrderNumber404JSONResponse Error

func (response ChangeChecklistItemOrderNumber404JSONResponse) VisitChangeChecklistItemOrderNumberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ChangeChecklistItemOrderNumber500JSONResponse Error

func (response ChangeChecklistItemOrderNumber500JSONResponse) VisitChangeChecklistItemOrderNumberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateChecklistItemRowRequestObject struct {
	ChecklistId uint `json:"checklistId"`
	ItemId      uint `json:"itemId"`
	Body        *CreateChecklistItemRowJSONRequestBody
}

type CreateChecklistItemRowResponseObject interface {
	VisitCreateChecklistItemRowResponse(w http.ResponseWriter) error
}

type CreateChecklistItemRow201JSONResponse ChecklistItemRowResponse

func (response CreateChecklistItemRow201JSONResponse) VisitCreateChecklistItemRowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateChecklistItemRow400JSONResponse Error

func (response CreateChecklistItemRow400JSONResponse) VisitCreateChecklistItemRowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateChecklistItemRow404JSONResponse Error

func (response CreateChecklistItemRow404JSONResponse) VisitCreateChecklistItemRowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateChecklistItemRow500JSONResponse Error

func (response CreateChecklistItemRow500JSONResponse) VisitCreateChecklistItemRowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all checklist items by checklist ID
	// (GET /api/v1/checklists/{checklistId}/items)
	GetAllChecklistItems(ctx context.Context, request GetAllChecklistItemsRequestObject) (GetAllChecklistItemsResponseObject, error)
	// Create a new checklist item
	// (POST /api/v1/checklists/{checklistId}/items)
	CreateChecklistItem(ctx context.Context, request CreateChecklistItemRequestObject) (CreateChecklistItemResponseObject, error)
	// Delete checklist item by checklistId and checklistItemId
	// (DELETE /api/v1/checklists/{checklistId}/items/{itemId})
	DeleteChecklistItemById(ctx context.Context, request DeleteChecklistItemByIdRequestObject) (DeleteChecklistItemByIdResponseObject, error)
	// Get checklist item by checklist id and item id
	// (GET /api/v1/checklists/{checklistId}/items/{itemId})
	GetChecklistItemBychecklistIdAndItemId(ctx context.Context, request GetChecklistItemBychecklistIdAndItemIdRequestObject) (GetChecklistItemBychecklistIdAndItemIdResponseObject, error)
	// Update checklist item by checklist id and item id
	// (PUT /api/v1/checklists/{checklistId}/items/{itemId})
	UpdateChecklistItemBychecklistIdAndItemId(ctx context.Context, request UpdateChecklistItemBychecklistIdAndItemIdRequestObject) (UpdateChecklistItemBychecklistIdAndItemIdResponseObject, error)
	// Change checklist item order number
	// (PATCH /api/v1/checklists/{checklistId}/items/{itemId}/change-order)
	ChangeChecklistItemOrderNumber(ctx context.Context, request ChangeChecklistItemOrderNumberRequestObject) (ChangeChecklistItemOrderNumberResponseObject, error)
	// Create checklist item row
	// (POST /api/v1/checklists/{checklistId}/items/{itemId}/rows)
	CreateChecklistItemRow(ctx context.Context, request CreateChecklistItemRowRequestObject) (CreateChecklistItemRowResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAllChecklistItems operation middleware
func (sh *strictHandler) GetAllChecklistItems(ctx *gin.Context, checklistId uint, params GetAllChecklistItemsParams) {
	var request GetAllChecklistItemsRequestObject

	request.ChecklistId = checklistId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllChecklistItems(ctx, request.(GetAllChecklistItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllChecklistItems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllChecklistItemsResponseObject); ok {
		if err := validResponse.VisitGetAllChecklistItemsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateChecklistItem operation middleware
func (sh *strictHandler) CreateChecklistItem(ctx *gin.Context, checklistId uint) {
	var request CreateChecklistItemRequestObject

	request.ChecklistId = checklistId

	var body CreateChecklistItemJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateChecklistItem(ctx, request.(CreateChecklistItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateChecklistItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateChecklistItemResponseObject); ok {
		if err := validResponse.VisitCreateChecklistItemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteChecklistItemById operation middleware
func (sh *strictHandler) DeleteChecklistItemById(ctx *gin.Context, checklistId uint, itemId uint) {
	var request DeleteChecklistItemByIdRequestObject

	request.ChecklistId = checklistId
	request.ItemId = itemId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteChecklistItemById(ctx, request.(DeleteChecklistItemByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteChecklistItemById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteChecklistItemByIdResponseObject); ok {
		if err := validResponse.VisitDeleteChecklistItemByIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChecklistItemBychecklistIdAndItemId operation middleware
func (sh *strictHandler) GetChecklistItemBychecklistIdAndItemId(ctx *gin.Context, checklistId uint, itemId uint) {
	var request GetChecklistItemBychecklistIdAndItemIdRequestObject

	request.ChecklistId = checklistId
	request.ItemId = itemId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChecklistItemBychecklistIdAndItemId(ctx, request.(GetChecklistItemBychecklistIdAndItemIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChecklistItemBychecklistIdAndItemId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChecklistItemBychecklistIdAndItemIdResponseObject); ok {
		if err := validResponse.VisitGetChecklistItemBychecklistIdAndItemIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateChecklistItemBychecklistIdAndItemId operation middleware
func (sh *strictHandler) UpdateChecklistItemBychecklistIdAndItemId(ctx *gin.Context, checklistId uint, itemId uint) {
	var request UpdateChecklistItemBychecklistIdAndItemIdRequestObject

	request.ChecklistId = checklistId
	request.ItemId = itemId

	var body UpdateChecklistItemBychecklistIdAndItemIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateChecklistItemBychecklistIdAndItemId(ctx, request.(UpdateChecklistItemBychecklistIdAndItemIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateChecklistItemBychecklistIdAndItemId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateChecklistItemBychecklistIdAndItemIdResponseObject); ok {
		if err := validResponse.VisitUpdateChecklistItemBychecklistIdAndItemIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ChangeChecklistItemOrderNumber operation middleware
func (sh *strictHandler) ChangeChecklistItemOrderNumber(ctx *gin.Context, checklistId uint, itemId uint, params ChangeChecklistItemOrderNumberParams) {
	var request ChangeChecklistItemOrderNumberRequestObject

	request.ChecklistId = checklistId
	request.ItemId = itemId
	request.Params = params

	var body ChangeChecklistItemOrderNumberJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ChangeChecklistItemOrderNumber(ctx, request.(ChangeChecklistItemOrderNumberRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ChangeChecklistItemOrderNumber")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ChangeChecklistItemOrderNumberResponseObject); ok {
		if err := validResponse.VisitChangeChecklistItemOrderNumberResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateChecklistItemRow operation middleware
func (sh *strictHandler) CreateChecklistItemRow(ctx *gin.Context, checklistId uint, itemId uint) {
	var request CreateChecklistItemRowRequestObject

	request.ChecklistId = checklistId
	request.ItemId = itemId

	var body CreateChecklistItemRowJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateChecklistItemRow(ctx, request.(CreateChecklistItemRowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateChecklistItemRow")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateChecklistItemRowResponseObject); ok {
		if err := validResponse.VisitCreateChecklistItemRowResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
