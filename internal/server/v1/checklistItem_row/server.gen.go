// Package checklistItem_row provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package checklistItem_row

import (
	"context"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// PostApiV1ChecklistsChecklistIdItemsItemIdRowsJSONBody defines parameters for PostApiV1ChecklistsChecklistIdItemsItemIdRows.
type PostApiV1ChecklistsChecklistIdItemsItemIdRowsJSONBody struct {
	Completed *bool  `json:"completed"`
	Name      string `json:"name"`
}

// PostApiV1ChecklistsChecklistIdItemsItemIdRowsJSONRequestBody defines body for PostApiV1ChecklistsChecklistIdItemsItemIdRows for application/json ContentType.
type PostApiV1ChecklistsChecklistIdItemsItemIdRowsJSONRequestBody PostApiV1ChecklistsChecklistIdItemsItemIdRowsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add new row to checklistItem
	// (POST /api/v1/checklists/{checklistId}/items/{itemId}/rows)
	PostApiV1ChecklistsChecklistIdItemsItemIdRows(c *gin.Context, checklistId uint, itemId uint)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostApiV1ChecklistsChecklistIdItemsItemIdRows operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1ChecklistsChecklistIdItemsItemIdRows(c *gin.Context) {

	var err error

	// ------------- Path parameter "checklistId" -------------
	var checklistId uint

	err = runtime.BindStyledParameterWithOptions("simple", "checklistId", c.Param("checklistId"), &checklistId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter checklistId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "itemId" -------------
	var itemId uint

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", c.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter itemId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiV1ChecklistsChecklistIdItemsItemIdRows(c, checklistId, itemId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/v1/checklists/:checklistId/items/:itemId/rows", wrapper.PostApiV1ChecklistsChecklistIdItemsItemIdRows)
}

type PostApiV1ChecklistsChecklistIdItemsItemIdRowsRequestObject struct {
	ChecklistId uint `json:"checklistId"`
	ItemId      uint `json:"itemId"`
	Body        *PostApiV1ChecklistsChecklistIdItemsItemIdRowsJSONRequestBody
}

type PostApiV1ChecklistsChecklistIdItemsItemIdRowsResponseObject interface {
	VisitPostApiV1ChecklistsChecklistIdItemsItemIdRowsResponse(w http.ResponseWriter) error
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Add new row to checklistItem
	// (POST /api/v1/checklists/{checklistId}/items/{itemId}/rows)
	PostApiV1ChecklistsChecklistIdItemsItemIdRows(ctx context.Context, request PostApiV1ChecklistsChecklistIdItemsItemIdRowsRequestObject) (PostApiV1ChecklistsChecklistIdItemsItemIdRowsResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostApiV1ChecklistsChecklistIdItemsItemIdRows operation middleware
func (sh *strictHandler) PostApiV1ChecklistsChecklistIdItemsItemIdRows(ctx *gin.Context, checklistId uint, itemId uint) {
	var request PostApiV1ChecklistsChecklistIdItemsItemIdRowsRequestObject

	request.ChecklistId = checklistId
	request.ItemId = itemId

	var body PostApiV1ChecklistsChecklistIdItemsItemIdRowsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiV1ChecklistsChecklistIdItemsItemIdRows(ctx, request.(PostApiV1ChecklistsChecklistIdItemsItemIdRowsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiV1ChecklistsChecklistIdItemsItemIdRows")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiV1ChecklistsChecklistIdItemsItemIdRowsResponseObject); ok {
		if err := validResponse.VisitPostApiV1ChecklistsChecklistIdItemsItemIdRowsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
