// Package checklistItemTemplate provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package checklistItemTemplate

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ChecklistItemTemplateResponse defines model for ChecklistItemTemplateResponse.
type ChecklistItemTemplateResponse struct {
	Id   uint                       `json:"id"`
	Rows []ChecklistItemTemplateRow `json:"rows"`
}

// ChecklistItemTemplateRow defines model for ChecklistItemTemplateRow.
type ChecklistItemTemplateRow struct {
	Id uint `json:"id"`
}

// CreateChecklistItemTemplateRequest defines model for CreateChecklistItemTemplateRequest.
type CreateChecklistItemTemplateRequest struct {
	Rows []ChecklistItemTemplateRow `json:"rows"`
}

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// UpdateChecklistItemTemplateRequest defines model for UpdateChecklistItemTemplateRequest.
type UpdateChecklistItemTemplateRequest struct {
	Id   uint                       `json:"id"`
	Rows []ChecklistItemTemplateRow `json:"rows"`
}

// CreateChecklistItemTemplateJSONRequestBody defines body for CreateChecklistItemTemplate for application/json ContentType.
type CreateChecklistItemTemplateJSONRequestBody = CreateChecklistItemTemplateRequest

// UpdateChecklistItemTemplateByIdJSONRequestBody defines body for UpdateChecklistItemTemplateById for application/json ContentType.
type UpdateChecklistItemTemplateByIdJSONRequestBody = UpdateChecklistItemTemplateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all checklist item templates
	// (GET /api/v1/checklist-item-templates)
	GetAllChecklistItemTemplates(c *gin.Context)
	// Create checklist item template
	// (POST /api/v1/checklist-item-templates)
	CreateChecklistItemTemplate(c *gin.Context)
	// Delete checklist item template by ID
	// (DELETE /api/v1/checklist-item-templates/{templateId})
	DeleteChecklistItemTemplateById(c *gin.Context, templateId uint)
	// Get checklist item template by ID
	// (GET /api/v1/checklist-item-templates/{templateId})
	GetChecklistItemTemplateById(c *gin.Context, templateId uint)
	// Update checklist item template by ID
	// (PUT /api/v1/checklist-item-templates/{templateId})
	UpdateChecklistItemTemplateById(c *gin.Context, templateId uint)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAllChecklistItemTemplates operation middleware
func (siw *ServerInterfaceWrapper) GetAllChecklistItemTemplates(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllChecklistItemTemplates(c)
}

// CreateChecklistItemTemplate operation middleware
func (siw *ServerInterfaceWrapper) CreateChecklistItemTemplate(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateChecklistItemTemplate(c)
}

// DeleteChecklistItemTemplateById operation middleware
func (siw *ServerInterfaceWrapper) DeleteChecklistItemTemplateById(c *gin.Context) {

	var err error

	// ------------- Path parameter "templateId" -------------
	var templateId uint

	err = runtime.BindStyledParameterWithOptions("simple", "templateId", c.Param("templateId"), &templateId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter templateId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteChecklistItemTemplateById(c, templateId)
}

// GetChecklistItemTemplateById operation middleware
func (siw *ServerInterfaceWrapper) GetChecklistItemTemplateById(c *gin.Context) {

	var err error

	// ------------- Path parameter "templateId" -------------
	var templateId uint

	err = runtime.BindStyledParameterWithOptions("simple", "templateId", c.Param("templateId"), &templateId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter templateId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChecklistItemTemplateById(c, templateId)
}

// UpdateChecklistItemTemplateById operation middleware
func (siw *ServerInterfaceWrapper) UpdateChecklistItemTemplateById(c *gin.Context) {

	var err error

	// ------------- Path parameter "templateId" -------------
	var templateId uint

	err = runtime.BindStyledParameterWithOptions("simple", "templateId", c.Param("templateId"), &templateId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter templateId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateChecklistItemTemplateById(c, templateId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/checklist-item-templates", wrapper.GetAllChecklistItemTemplates)
	router.POST(options.BaseURL+"/api/v1/checklist-item-templates", wrapper.CreateChecklistItemTemplate)
	router.DELETE(options.BaseURL+"/api/v1/checklist-item-templates/:templateId", wrapper.DeleteChecklistItemTemplateById)
	router.GET(options.BaseURL+"/api/v1/checklist-item-templates/:templateId", wrapper.GetChecklistItemTemplateById)
	router.PUT(options.BaseURL+"/api/v1/checklist-item-templates/:templateId", wrapper.UpdateChecklistItemTemplateById)
}

type GetAllChecklistItemTemplatesRequestObject struct {
}

type GetAllChecklistItemTemplatesResponseObject interface {
	VisitGetAllChecklistItemTemplatesResponse(w http.ResponseWriter) error
}

type GetAllChecklistItemTemplates200JSONResponse []ChecklistItemTemplateResponse

func (response GetAllChecklistItemTemplates200JSONResponse) VisitGetAllChecklistItemTemplatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllChecklistItemTemplates500JSONResponse Error

func (response GetAllChecklistItemTemplates500JSONResponse) VisitGetAllChecklistItemTemplatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateChecklistItemTemplateRequestObject struct {
	Body *CreateChecklistItemTemplateJSONRequestBody
}

type CreateChecklistItemTemplateResponseObject interface {
	VisitCreateChecklistItemTemplateResponse(w http.ResponseWriter) error
}

type CreateChecklistItemTemplate201JSONResponse ChecklistItemTemplateResponse

func (response CreateChecklistItemTemplate201JSONResponse) VisitCreateChecklistItemTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateChecklistItemTemplate400JSONResponse Error

func (response CreateChecklistItemTemplate400JSONResponse) VisitCreateChecklistItemTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateChecklistItemTemplate500JSONResponse Error

func (response CreateChecklistItemTemplate500JSONResponse) VisitCreateChecklistItemTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChecklistItemTemplateByIdRequestObject struct {
	TemplateId uint `json:"templateId"`
}

type DeleteChecklistItemTemplateByIdResponseObject interface {
	VisitDeleteChecklistItemTemplateByIdResponse(w http.ResponseWriter) error
}

type DeleteChecklistItemTemplateById204Response struct {
}

func (response DeleteChecklistItemTemplateById204Response) VisitDeleteChecklistItemTemplateByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteChecklistItemTemplateById404JSONResponse Error

func (response DeleteChecklistItemTemplateById404JSONResponse) VisitDeleteChecklistItemTemplateByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChecklistItemTemplateById500JSONResponse Error

func (response DeleteChecklistItemTemplateById500JSONResponse) VisitDeleteChecklistItemTemplateByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetChecklistItemTemplateByIdRequestObject struct {
	TemplateId uint `json:"templateId"`
}

type GetChecklistItemTemplateByIdResponseObject interface {
	VisitGetChecklistItemTemplateByIdResponse(w http.ResponseWriter) error
}

type GetChecklistItemTemplateById200JSONResponse ChecklistItemTemplateResponse

func (response GetChecklistItemTemplateById200JSONResponse) VisitGetChecklistItemTemplateByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChecklistItemTemplateById404JSONResponse Error

func (response GetChecklistItemTemplateById404JSONResponse) VisitGetChecklistItemTemplateByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetChecklistItemTemplateById500JSONResponse Error

func (response GetChecklistItemTemplateById500JSONResponse) VisitGetChecklistItemTemplateByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateChecklistItemTemplateByIdRequestObject struct {
	TemplateId uint `json:"templateId"`
	Body       *UpdateChecklistItemTemplateByIdJSONRequestBody
}

type UpdateChecklistItemTemplateByIdResponseObject interface {
	VisitUpdateChecklistItemTemplateByIdResponse(w http.ResponseWriter) error
}

type UpdateChecklistItemTemplateById200JSONResponse ChecklistItemTemplateResponse

func (response UpdateChecklistItemTemplateById200JSONResponse) VisitUpdateChecklistItemTemplateByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateChecklistItemTemplateById404JSONResponse Error

func (response UpdateChecklistItemTemplateById404JSONResponse) VisitUpdateChecklistItemTemplateByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateChecklistItemTemplateById500JSONResponse Error

func (response UpdateChecklistItemTemplateById500JSONResponse) VisitUpdateChecklistItemTemplateByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all checklist item templates
	// (GET /api/v1/checklist-item-templates)
	GetAllChecklistItemTemplates(ctx context.Context, request GetAllChecklistItemTemplatesRequestObject) (GetAllChecklistItemTemplatesResponseObject, error)
	// Create checklist item template
	// (POST /api/v1/checklist-item-templates)
	CreateChecklistItemTemplate(ctx context.Context, request CreateChecklistItemTemplateRequestObject) (CreateChecklistItemTemplateResponseObject, error)
	// Delete checklist item template by ID
	// (DELETE /api/v1/checklist-item-templates/{templateId})
	DeleteChecklistItemTemplateById(ctx context.Context, request DeleteChecklistItemTemplateByIdRequestObject) (DeleteChecklistItemTemplateByIdResponseObject, error)
	// Get checklist item template by ID
	// (GET /api/v1/checklist-item-templates/{templateId})
	GetChecklistItemTemplateById(ctx context.Context, request GetChecklistItemTemplateByIdRequestObject) (GetChecklistItemTemplateByIdResponseObject, error)
	// Update checklist item template by ID
	// (PUT /api/v1/checklist-item-templates/{templateId})
	UpdateChecklistItemTemplateById(ctx context.Context, request UpdateChecklistItemTemplateByIdRequestObject) (UpdateChecklistItemTemplateByIdResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAllChecklistItemTemplates operation middleware
func (sh *strictHandler) GetAllChecklistItemTemplates(ctx *gin.Context) {
	var request GetAllChecklistItemTemplatesRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllChecklistItemTemplates(ctx, request.(GetAllChecklistItemTemplatesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllChecklistItemTemplates")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllChecklistItemTemplatesResponseObject); ok {
		if err := validResponse.VisitGetAllChecklistItemTemplatesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateChecklistItemTemplate operation middleware
func (sh *strictHandler) CreateChecklistItemTemplate(ctx *gin.Context) {
	var request CreateChecklistItemTemplateRequestObject

	var body CreateChecklistItemTemplateJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateChecklistItemTemplate(ctx, request.(CreateChecklistItemTemplateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateChecklistItemTemplate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateChecklistItemTemplateResponseObject); ok {
		if err := validResponse.VisitCreateChecklistItemTemplateResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteChecklistItemTemplateById operation middleware
func (sh *strictHandler) DeleteChecklistItemTemplateById(ctx *gin.Context, templateId uint) {
	var request DeleteChecklistItemTemplateByIdRequestObject

	request.TemplateId = templateId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteChecklistItemTemplateById(ctx, request.(DeleteChecklistItemTemplateByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteChecklistItemTemplateById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteChecklistItemTemplateByIdResponseObject); ok {
		if err := validResponse.VisitDeleteChecklistItemTemplateByIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChecklistItemTemplateById operation middleware
func (sh *strictHandler) GetChecklistItemTemplateById(ctx *gin.Context, templateId uint) {
	var request GetChecklistItemTemplateByIdRequestObject

	request.TemplateId = templateId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChecklistItemTemplateById(ctx, request.(GetChecklistItemTemplateByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChecklistItemTemplateById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChecklistItemTemplateByIdResponseObject); ok {
		if err := validResponse.VisitGetChecklistItemTemplateByIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateChecklistItemTemplateById operation middleware
func (sh *strictHandler) UpdateChecklistItemTemplateById(ctx *gin.Context, templateId uint) {
	var request UpdateChecklistItemTemplateByIdRequestObject

	request.TemplateId = templateId

	var body UpdateChecklistItemTemplateByIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateChecklistItemTemplateById(ctx, request.(UpdateChecklistItemTemplateByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateChecklistItemTemplateById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateChecklistItemTemplateByIdResponseObject); ok {
		if err := validResponse.VisitUpdateChecklistItemTemplateByIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
